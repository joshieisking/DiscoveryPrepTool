// Update this section in client/src/components/visualization/chart-factory.ts

// Replace the 'financial-dashboard' template with this improved version:
{
  id: 'financial-dashboard',
  name: 'Financial Key Metrics',
  description: 'Essential financial indicators from annual report',
  icon: 'DollarSign',
  generate: (analysisData: AnalysisData) => {
    // STEP 1: Try to use structured financial data first (PREFERRED)
    if (analysisData.financialMetrics) {
      console.log('Using structured financial data:', analysisData.financialMetrics);
      
      const fm = analysisData.financialMetrics;
      const currency = fm.revenue.currency || fm.assets?.currency || 'USD';
      
      // Parse structured financial values
      const revenue = parseStructuredFinancialValue(fm.revenue.current);
      const profit = parseStructuredFinancialValue(fm.profitLoss.amount);
      const employees = fm.employees.total;
      const assets = parseStructuredFinancialValue(fm.assets?.total);
      
      // Calculate profit margin if we have both revenue and profit
      const profitMargin = (revenue && profit && revenue > 0) 
        ? (profit / revenue) * 100 
        : null;

      // Financial validation: profit should not exceed revenue
      const validatedProfit = (revenue && profit && profit > revenue) ? null : profit;
      if (profit && revenue && profit > revenue) {
        console.warn('Profit extraction appears incorrect (profit > revenue), setting to null');
      }

      const financialData: ChartDataPoint[] = [
        {
          name: 'Total Revenue',
          value: revenue || 0,
          description: revenue 
            ? formatFinancialValueForDisplay(revenue, 'currency', currency)
            : 'Data not available',
          category: 'financial'
        },
        {
          name: 'Net Profit',
          value: validatedProfit || 0,
          description: validatedProfit 
            ? formatFinancialValueForDisplay(validatedProfit, 'currency', currency)
            : 'Data not available',
          category: 'financial'
        },
        {
          name: 'Total Employees',
          value: employees || 0,
          description: employees 
            ? employees.toLocaleString()
            : 'Data not available',
          category: 'workforce'
        },
        {
          name: 'Profit Margin',
          value: profitMargin || 0,
          description: profitMargin 
            ? `${profitMargin.toFixed(1)}%`
            : 'Data not available',
          category: 'financial'
        }
      ];

      // Only return the chart if we have at least one piece of financial data
      const hasFinancialData = revenue || validatedProfit || employees || assets;
      if (!hasFinancialData) {
        console.warn('No structured financial data available');
        return null;
      }

      return {
        type: 'metric-cards',
        title: 'Financial Key Metrics',
        data: financialData,
        colors: ['#3b82f6', '#10b981', '#f59e0b', '#8b5cf6'],
        description: `Key financial indicators extracted from the annual report (${currency}) - High Confidence`,
        insights: analysisData.businessContext.filter(insight => 
          insight.dataPoint.toLowerCase().includes('revenue') ||
          insight.dataPoint.toLowerCase().includes('profit') ||
          insight.dataPoint.toLowerCase().includes('income') ||
          insight.dataPoint.toLowerCase().includes('employ')
        )
      };
    }

    // STEP 2: Fallback to text extraction (BACKUP METHOD)
    console.log('Structured financial data not available, attempting text extraction...');
    
    const currency = FinancialDataExtractor.getExtractedCurrency(analysisData);
    const revenue = FinancialDataExtractor.extractRevenue(analysisData);
    let profit = FinancialDataExtractor.extractProfit(analysisData);
    const employees = FinancialDataExtractor.extractEmployees(analysisData);
    
    // Financial validation: profit should not exceed revenue
    if (revenue && profit && profit > revenue) {
      console.warn('Text extraction: Profit appears incorrect (profit > revenue), setting to null');
      profit = null;
    }
    
    const profitMargin = (revenue && profit) 
      ? FinancialDataExtractor.calculateProfitMargin(revenue, profit)
      : null;

    const financialData: ChartDataPoint[] = [
      {
        name: 'Total Revenue',
        value: revenue || 0,
        description: revenue 
          ? FinancialDataExtractor.formatFinancialValue(revenue, 'currency', currency) 
          : 'Data not available',
        category: 'financial'
      },
      {
        name: 'Net Profit',
        value: profit || 0,
        description: profit 
          ? FinancialDataExtractor.formatFinancialValue(profit, 'currency', currency) 
          : 'Data not available',
        category: 'financial'
      },
      {
        name: 'Total Employees',
        value: employees || 0,
        description: employees 
          ? FinancialDataExtractor.formatFinancialValue(employees, 'number') 
          : 'Data not available',
        category: 'workforce'
      },
      {
        name: 'Profit Margin',
        value: profitMargin || 0,
        description: profitMargin 
          ? FinancialDataExtractor.formatFinancialValue(profitMargin, 'percentage') 
          : 'Data not available',
        category: 'financial'
      }
    ];

    // Only return the chart if we have at least one piece of financial data
    const hasFinancialData = revenue || profit || employees;
    if (!hasFinancialData) {
      console.warn('No financial data available from text extraction either');
      return null;
    }

    return {
      type: 'metric-cards',
      title: 'Financial Key Metrics',
      data: financialData,
      colors: ['#3b82f6', '#10b981', '#f59e0b', '#8b5cf6'],
      description: `Key financial indicators extracted from the annual report (${currency.code}) - Text Extraction`,
      insights: analysisData.businessContext.filter(insight => 
        insight.dataPoint.toLowerCase().includes('revenue') ||
        insight.dataPoint.toLowerCase().includes('profit') ||
        insight.dataPoint.toLowerCase().includes('income') ||
        insight.dataPoint.toLowerCase().includes('employ')
      )
    };
  }
}

// ADD these helper functions at the top of the file:

// Helper function to parse structured financial values like "4.2B", "500M", etc.
function parseStructuredFinancialValue(valueStr: string | null): number | null {
  if (!valueStr) return null;
  
  // Remove currency symbols and clean the value
  const cleanValue = valueStr.replace(/[S$€£¥RM,\s]/g, '').toLowerCase();
  const numberPart = parseFloat(cleanValue.replace(/[^\d.]/g, ''));
  
  if (isNaN(numberPart)) return null;
  
  // Apply scale multipliers
  if (cleanValue.includes('billion') || cleanValue.includes('b')) {
    return numberPart * 1000000000;
  } else if (cleanValue.includes('million') || cleanValue.includes('m')) {
    return numberPart * 1000000;
  } else if (cleanValue.includes('thousand') || cleanValue.includes('k')) {
    return numberPart * 1000;
  }
  
  // If no scale specified, assume the number is already in its final form
  return numberPart;
}

// Helper function to format financial values for display
function formatFinancialValueForDisplay(value: number, type: 'currency' | 'number' | 'percentage', currency?: string): string {
  if (value === null || value === undefined) return 'N/A';
  
  switch (type) {
    case 'currency':
      const currencySymbol = currency === 'EUR' ? '€' : currency === 'GBP' ? '£' : '$';
      if (value >= 1000000000) {
        return `${currencySymbol}${(value / 1000000000).toFixed(1)}B`;
      } else if (value >= 1000000) {
        return `${currencySymbol}${(value / 1000000).toFixed(1)}M`;
      } else if (value >= 1000) {
        return `${currencySymbol}${(value / 1000).toFixed(1)}K`;
      }
      return `${currencySymbol}${value.toLocaleString()}`;
    
    case 'number':
      return value.toLocaleString();
    
    case 'percentage':
      return `${value.toFixed(1)}%`;
    
    default:
      return value.toString();
  }
}