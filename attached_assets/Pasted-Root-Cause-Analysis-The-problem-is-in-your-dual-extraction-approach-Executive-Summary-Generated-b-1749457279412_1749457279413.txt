Root Cause Analysis
The problem is in your dual extraction approach:

Executive Summary: Generated by server/services/gemini.ts using AI prompts that successfully extract and include financial data in the narrative text
Financial Charts: Generated by client/src/components/visualization/chart-factory.ts using the FinancialDataExtractor class that tries to re-extract financial data from the already-processed analysis text

The Specific Issue
In chart-factory.ts, your Financial Key Metrics template does this:
typescriptconst revenue = FinancialDataExtractor.extractRevenue(analysisData);
let profit = FinancialDataExtractor.extractProfit(analysisData);
const employees = FinancialDataExtractor.extractEmployees(analysisData);
The FinancialDataExtractor class is trying to parse financial data from the HR insights text (which are already processed), rather than using the structured financial data that was extracted in the backend pipeline.
The Solution
You have two main options:
Option 1: Use Backend Financial Extraction (Recommended)
Modify your backend to return structured financial metrics and use them directly in the frontend:
In server/services/gemini.ts, ensure the enhanced analysis result includes structured financial data:
typescript// Make sure this is always included in the response
const enhancedResult: EnhancedAnalysisResult = {
  ...analysisResult,
  financialMetrics: {
    revenue: {
      current: pipelineResult.financialMetrics.revenue.current,
      // ... other fields
    },
    // ... other metrics
  }
};
In chart-factory.ts, modify the financial dashboard template to use structured data instead of re-parsing:
typescriptgenerate: (analysisData: AnalysisData & { financialMetrics?: any }) => {
  // Use structured data if available
  if (analysisData.financialMetrics) {
    const revenue = analysisData.financialMetrics.revenue.current;
    const profit = analysisData.financialMetrics.profitLoss.amount;
    const employees = analysisData.financialMetrics.employees.total;
    // ... use these directly
  } else {
    // Fall back to text extraction
    const revenue = FinancialDataExtractor.extractRevenue(analysisData);
    // ...
  }
}